package com.denshyk.book_list.controller;

import com.denshyk.book_list.exception.BookNotFoundException;
import com.denshyk.book_list.model.Book;
import com.denshyk.book_list.repository.BookRepository;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.Valid;
import java.util.List;

@RestController
@RequestMapping("/api")
public class BookController {

    @Autowired
    BookRepository bookRepository;

    @PostMapping("/books")
    @ApiOperation(value = "Adds a new book with an autogenerated id",
            notes = "Provide the book's title and author",
            response = Book.class)
    public Book createBook(@RequestBody @Valid Book book) {
        return bookRepository.save(book);
    }

    @GetMapping("/books")
    @ApiOperation(value = "Returns all the books",
            response = List.class)
    public List<Book> getAllBooks() {
        return bookRepository.findAll();
    }

    @GetMapping("/books/{id}")
    @ApiOperation(value = "Finds book by id",
            notes = "Provide an id to find specific book",
            response = Book.class)
    public Book getBookById(@ApiParam(value = "An id for the book you need to retrieve", required = true)
                            @PathVariable(value = "id") Long id) {
        return bookRepository.findById(id).orElseThrow(() -> new BookNotFoundException("Book with id = " + id + " is not found!"));
    }

    @PutMapping("/books/{id}")
    @ApiOperation(value = "Updates info about specific book",
            notes = "Provide an id to update the book",
            response = Book.class)
    public Book updateBook(@ApiParam(name = "id", type = "long", value = "An id for the book you need to update", required = true)
                           @PathVariable(value = "id") Long id, @RequestBody @Valid Book newBook) {
        bookRepository.findById(id).orElseThrow(() -> new BookNotFoundException("Book with id = " + id + " is not found!"));

        newBook.setId(id);
        return bookRepository.save(newBook);
    }

    @DeleteMapping("/books/{id}")
    @ApiOperation(value = "Deletes specific book",
            notes = "Provide an id to delete a specific book",
            response = Book.class)
    public ResponseEntity<String> deleteBook(@ApiParam(name = "id", type = "long", value = "An id for the book you need to delete", required = true)
                                             @PathVariable(value = "id") Long id) {
        Book book = bookRepository.findById(id).orElseThrow(() -> new BookNotFoundException("Book with id = " + id + " is not found!"));

        bookRepository.delete(book);
        return new ResponseEntity<>("Done", HttpStatus.OK);
    }
}